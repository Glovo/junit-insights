apply plugin: 'maven-publish'

group = 'de.adesso'
version = '0.0.1'
sourceCompatibility = 1.8

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
            artifactId = 'junit-insights'
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("${buildDir}/libs/junit-insights-${version}.pom")
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    baseName = 'junit-insights'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("node_modules", "src", "package.json", "package-lock.json", "webpack.config.js", "main.js")
}

test {
    systemProperty 'de.adesso.junitinsights.enabled', 'false'
    useJUnitPlatform()
}

task npmInstall(type: Exec) {
    inputs.files(
            'src/frontend/package-lock.json',
            'src/frontend/webpack.config.js'
    )
    outputs.dir 'src/frontend/node_modules/'

    workingDir = 'src/frontend/'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm install'
    } else {
        commandLine 'sh', '-c', 'npm install'
    }
}

task npmRunBuild(type: Exec) {
    dependsOn npmInstall
    inputs.dir 'src/frontend/src'
    outputs.file 'src/main/resources/index.html'
    workingDir = 'src/frontend'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm run build'
    } else {
        commandLine 'sh', '-c', 'npm run build'
    }
}

build.dependsOn jar
assemble.dependsOn jar

dependencies {
    compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('com.google.code.gson:gson:2.7')

    compileOnly('org.junit.jupiter:junit-jupiter-api:5.1.0')
    compileOnly('org.junit.platform:junit-platform-launcher:1.1.0')
    compileOnly('org.springframework.boot:spring-boot-starter')

    testCompile('org.junit.jupiter:junit-jupiter-engine:5.1.0')
    testCompile('org.junit.platform:junit-platform-launcher:1.1.0')
    testCompile('org.springframework.boot:spring-boot-starter')

    // You can easily generate your own configuration metadata file from items annotated with
    // @ConfigurationProperties by using the spring-boot-configuration-processor jar. The jar
    // includes a Java annotation processor which is invoked as your project is compiled.
    // To use the processor, include a dependency on spring-boot-configuration-processor.
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}
