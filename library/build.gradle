// Import of plugins

plugins {
    id "org.jetbrains.dokka" version "0.9.17"
    id "maven-publish"
}

// Global variable declarations

group = 'de.adesso'
version = '0.0.1' + (Boolean.valueOf(System.getenv("snapshot")) ? "-SNAPSHOT" : "")
sourceCompatibility = 1.8

// Build tasks

jar {
    enabled = true
    baseName = 'junit-insights'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("main.js")
}

task sourcesJar(type: Jar) {
    group = 'build'
    baseName = 'junit-insights'
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar.dependsOn sourcesJar

bootJar {
    enabled = false
}

// Test tasks

test {
    useJUnitPlatform()
    systemProperty 'de.adesso.junitinsights.enabled', 'false'
}

// JavaDoc tasks

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

// Publishing tasks

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
            artifactId = 'junit-insights'
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("${buildDir}/libs/junit-insights-${version}.pom")
    }
}

// npm specific tasks

task npmInstall(type: Exec) {
    inputs.files(
            'src/frontend/package-lock.json',
            'src/frontend/webpack.config.js'
    )
    outputs.dir 'src/frontend/node_modules/'

    workingDir = 'src/frontend/'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm install'
    } else {
        commandLine 'sh', '-c', 'npm install'
    }
}

task npmRunBuild(type: Exec) {
    dependsOn npmInstall
    inputs.dir 'src/frontend/src'
    outputs.file 'src/main/resources/index.html'
    workingDir = 'src/frontend'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm run build'
    } else {
        commandLine 'sh', '-c', 'npm run build'
    }
}

// Dependency declarations

dependencies {
    compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('com.google.code.gson:gson:2.7')

    compileOnly('org.junit.jupiter:junit-jupiter-api:5.1.0')
    compileOnly('org.junit.platform:junit-platform-launcher:1.1.0')
    compileOnly('org.springframework.boot:spring-boot-starter')

    testCompile('org.junit.jupiter:junit-jupiter-engine:5.1.0')
    testCompile('org.junit.platform:junit-platform-launcher:1.1.0')
    testCompile('org.springframework.boot:spring-boot-starter')

    testImplementation('com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0')
}
